public abstract class MathUtil {
  public static boolean areCoprime(int a,int b){
    return gcf(a,b)>1;
  }
  
  public static int gcf(int a,int b){//Precond: a>0&&b>0
    for (int i=((a<b)?a:b);i>1;i--)
      if ((a%i==0)&&(b%i==0))
        return i;
    return 1;
  }
  
  public static int lcm(int a,int b){//Precond: a>0&&b>0
    for (int i=((a>b)?a:b);i<a*b;i++)
      if ((i%a==0)&&(i%b==0))
        return i;
    return a*b;
  }

  public static int digits(double a){
    return 1+(int)Math.log10(a);
  }
  
  public static double recip(double a){
    if (a1==0||a==NaN)
      throw new IllegalArgumentException();
    else return 1/a;
  }
  
  public static String gen(int a){
    String s="";
    for (int b=0;b<a/26;b++)
      s+="X";    
    for (int i=0;i<a;i++){
      s+=""+(char)(97+a%26);
    return s;
    }
  }
  
  public static boolean isPrime(int a){
    for (int i=2;i<a;i++){
      if (a%i==0)
        return false;
    }
    return true;
  }
  private static List<Integer> prime=new ArrayList<Integer>();
  static {
      
  }
  public static int nthPrime(int n){
    
    return primes.get(n-1);
    
  }
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
}
















